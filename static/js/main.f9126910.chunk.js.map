{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/ScrollRobot.js","containers/App.js","action.js","constants.js","serviceWorker.js","reducer.js","index.js"],"names":["SearchBox","onSearchRobots","className","for","id","type","onChange","placeholder","Card","robot","username","email","src","alt","CardList","robots","map","index","key","ScrollRobot","children","style","height","overflowY","border","App","searchField","useSelector","state","searchRobots","requestRobots","isPending","dispatch","useDispatch","useEffect","a","fetch","response","json","payload","filterRobot","filter","toLowerCase","includes","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","initState","initRobots","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunk","logger","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f9126910.chunk.js","sourcesContent":["import React from 'react';\n\nfunction SearchBox({onSearchRobots}) {\n  return(\n    <div className=\"pa2\">\n      <label for=\"robo\"></label>\n      <input id=\"robo\" type=\"search\" className=\"pa3 ba b--green bg-lightest-blue\" onChange={onSearchRobots} placeholder=\"Search robot\"/>\n    </div>\n  )\n}\n\nexport default SearchBox;","import React from 'react';\n\nfunction Card({robot}) {\n  const { id, username, email } = robot;\n  return(\n    <div className=\"pa3 grow bg-light-green ma2 tc bw2 br3 shadow-5 dib\">\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robot\"/>\n      <h2>{username}</h2>\n      <p>{email}</p>\n    </div>\n  )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nfunction CardList({robots}) {\n  return(\n    <div className=\"tc\">\n      {robots.map((robot, index) => <Card key={index} robot={robot}/>)}\n    </div>\n  )\n}\n\nexport default CardList;","import React from 'react';\n\nfunction ScrollRobot({children}) {\n  return (\n    <div style={\n      {\n        height: '500px',\n        overflowY: 'auto',\n        border: 'solid 5px #000000'\n      }\n    }>\n      {children}\n    </div>\n  )\n}\n\nexport default ScrollRobot;","import React, {useEffect} from 'react';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList';\nimport ScrollRobot from '../components/ScrollRobot';\nimport { useSelector, useDispatch } from 'react-redux'\nimport './App.css';\nimport { searchRobots, requestRobots } from '../action';\n\nfunction App() {\n  const searchField = useSelector(state => state.searchRobots.searchField);\n  const robots = useSelector(state => state.requestRobots.robots);\n  const isPending = useSelector(state => state.requestRobots.isPending);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(requestRobots());\n  }, [dispatch]);\n\n  const filterRobot = robots.filter(robot => robot.username.toLowerCase().includes(searchField.toLowerCase()));\n  \n  return (isPending ? <h1>Loading...</h1>: (\n    <div className=\"tc pa3\">\n      <h1>ROBOFRIENDS</h1>\n      <SearchBox searchField={searchField} onSearchRobots={event => dispatch(searchRobots(event.target.value))}/>\n      <ScrollRobot>\n        <CardList robots={filterRobot}/>\n      </ScrollRobot>\n    </div>\n  ))\n}\n\nexport default (App);\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOT_PENDING, REQUEST_ROBOT_FAILED, REQUEST_ROBOT_SUCCESS } from \"./constants\";\n\nexport const searchRobots = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => async (dispatch) => {\n  dispatch({type: REQUEST_ROBOT_PENDING});\n  try {\n    const response = await fetch('https://jsonplaceholder.typicode.com/users');\n    const robots = await response.json();\n    dispatch({type: REQUEST_ROBOT_SUCCESS, payload: robots});\n  } catch (error) {\n    dispatch({type: REQUEST_ROBOT_FAILED, payload: error});\n  }\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOT_PENDING = 'REQUEST_ROBOT_PENDING';\nexport const REQUEST_ROBOT_SUCCESS = 'REQUEST_ROBOT_SUCCESS';\nexport const REQUEST_ROBOT_FAILED = 'REQUEST_ROBOT_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOT_SUCCESS, REQUEST_ROBOT_FAILED, REQUEST_ROBOT_PENDING } from \"./constants\";\n\n\nconst initState = {\n  searchField: ''\n};\n\nexport const searchRobots = (state = initState, action = {}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, {searchField: action.payload});\n    default:\n      return state;\n  }\n}\n\nconst initRobots = {\n  robots: [],\n  isPending: false,\n  error: ''\n};\n\nexport const requestRobots = (state = initRobots, action = {}) => {\n  switch(action.type) {\n    case REQUEST_ROBOT_PENDING:\n      return Object.assign({}, state, {isPending: true});\n    case REQUEST_ROBOT_SUCCESS:\n      return Object.assign({}, state, {isPending: false, robots: action.payload});\n    case REQUEST_ROBOT_FAILED:\n      return Object.assign({}, state, {isPending: false, error: action.payload});\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport {Provider} from 'react-redux';\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk';\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducer';\n\nconst rootReducers = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducers, applyMiddleware(thunk, logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}