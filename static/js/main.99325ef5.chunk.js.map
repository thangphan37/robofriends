{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/ScrollRobot.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","onSearchRobot","className","type","onChange","placeholder","Card","robot","id","username","email","src","alt","CardList","robots","map","index","key","ScrollRobot","children","style","height","overflowY","border","App","useState","setRobots","searchField","setSearchField","useEffect","a","fetch","response","json","fetchRobots","filterRobot","filter","toLowerCase","includes","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAUeA,MARf,YAAqC,IAAjBC,EAAgB,EAAhBA,cAClB,OACE,yBAAKC,UAAU,OACb,2BAAOC,KAAK,SAASD,UAAU,mCAAmCE,SAAUH,EAAeI,YAAY,mBCQ9FC,MAXf,YAAwB,IAATC,EAAQ,EAARA,MACLC,EAAwBD,EAAxBC,GAAIC,EAAoBF,EAApBE,SAAUC,EAAUH,EAAVG,MACtB,OACE,yBAAKR,UAAU,uDACb,yBAAKS,IAAG,+BAA0BH,EAA1B,iBAA6CI,IAAI,UACzD,4BAAKH,GACL,2BAAIC,KCGKG,MARf,YAA6B,IAAVC,EAAS,EAATA,OACjB,OACE,yBAAKZ,UAAU,MACZY,EAAOC,KAAI,SAACR,EAAOS,GAAR,OAAkB,kBAAC,EAAD,CAAMC,IAAKD,EAAOT,MAAOA,SCU9CW,MAdf,YAAkC,IAAZC,EAAW,EAAXA,SACpB,OACE,yBAAKC,MACH,CACEC,OAAQ,QACRC,UAAW,OACXC,OAAQ,sBAGTJ,I,MC0BQK,MA/Bf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNX,EADM,KACEY,EADF,OAEyBD,mBAAS,IAFlC,mBAENE,EAFM,KAEOC,EAFP,KAIbC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACyBC,MAAM,8CAD/B,cACQC,EADR,gBAEuBA,EAASC,OAFhC,OAEQnB,EAFR,OAIEY,EAAUZ,GAJZ,4CADc,uBAAC,WAAD,wBAQdoB,KACC,IAMH,IAAMC,EAAcrB,EAAOsB,QAAO,SAAA7B,GAAK,OAAIA,EAAME,SAAS4B,cAAcC,SAASX,EAAYU,kBAC7F,OACE,yBAAKnC,UAAU,UACb,2CACA,kBAAC,EAAD,CAAWyB,YAAaA,EAAa1B,cARzC,SAAuBsC,GACrBX,EAAeW,EAAMC,OAAOC,UAQ1B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU3B,OAAQqB,O,YCnBNO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.99325ef5.chunk.js","sourcesContent":["import React from 'react';\n\nfunction SearchBox({onSearchRobot}) {\n  return(\n    <div className=\"pa2\">\n      <input type=\"search\" className=\"pa3 ba b--green bg-lightest-blue\" onChange={onSearchRobot} placeholder=\"Search robot\"/>\n    </div>\n  )\n}\n\nexport default SearchBox;","import React from 'react';\n\nfunction Card({robot}) {\n  const { id, username, email } = robot;\n  return(\n    <div className=\"pa3 grow bg-light-green ma2 tc bw2 br3 shadow-5 dib\">\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robot\"/>\n      <h2>{username}</h2>\n      <p>{email}</p>\n    </div>\n  )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nfunction CardList({robots}) {\n  return(\n    <div className=\"tc\">\n      {robots.map((robot, index) => <Card key={index} robot={robot}/>)}\n    </div>\n  )\n}\n\nexport default CardList;","import React from 'react';\n\nfunction ScrollRobot({children}) {\n  return (\n    <div style={\n      {\n        height: '500px',\n        overflowY: 'auto',\n        border: 'solid 5px #000000'\n      }\n    }>\n      {children}\n    </div>\n  )\n}\n\nexport default ScrollRobot;","import React, {useState, useEffect} from 'react';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList';\nimport ScrollRobot from '../components/ScrollRobot';\nimport './App.css';\n\nfunction App() {\n  const [robots, setRobots] = useState([]);\n  const [searchField, setSearchField] = useState('');\n\n  useEffect(() => {\n    async function fetchRobots() {\n      const response = await fetch('https://jsonplaceholder.typicode.com/users');\n      const robots = await response.json();\n      \n      setRobots(robots);\n    }\n\n    fetchRobots();\n  }, []);\n\n  function onSearchRobot(event) {\n    setSearchField(event.target.value);\n  }\n\n  const filterRobot = robots.filter(robot => robot.username.toLowerCase().includes(searchField.toLowerCase()));\n  return (\n    <div className=\"tc pa3\">\n      <h1>ROBOFRIENDS</h1>\n      <SearchBox searchField={searchField} onSearchRobot={onSearchRobot}/>\n      <ScrollRobot>\n        <CardList robots={filterRobot}/>\n      </ScrollRobot>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}